---@meta
--- This file is autogenerated by lite-xl-robolox-luacats.

---@class Terrain: BasePart  
Terrain = {}
---@param x int
---@param y int
---@param z int
---@return bool
function Terrain:AutowedgeCell(x, y, z) end

---@param region Region3int16
function Terrain:AutowedgeCells(region) end


---@return bool
function Terrain:CanShorelinesBeUpgraded() end


---@return bool
function Terrain:CanSmoothVoxelsBeUpgraded() end

---@param x int
---@param y int
---@param z int
---@return Vector3
function Terrain:CellCenterToWorld(x, y, z) end

---@param x int
---@param y int
---@param z int
---@return Vector3
function Terrain:CellCornerToWorld(x, y, z) end


function Terrain:Clear() end


function Terrain:ConvertToSmooth() end

---@param region Region3int16
---@return TerrainRegion
function Terrain:CopyRegion(region) end


---@return int
function Terrain:CountCells() end

---@param center Vector3
---@param radius float
---@param material Material
function Terrain:FillBall(center, radius, material) end

---@param cframe CFrame
---@param size Vector3
---@param material Material
function Terrain:FillBlock(cframe, size, material) end

---@param cframe CFrame
---@param height float
---@param radius float
---@param material Material
function Terrain:FillCylinder(cframe, height, radius, material) end

---@param region Region3
---@param resolution float
---@param material Material
function Terrain:FillRegion(region, resolution, material) end

---@param cframe CFrame
---@param size Vector3
---@param material Material
function Terrain:FillWedge(cframe, size, material) end

---@param x int
---@param y int
---@param z int
---@return Tuple
function Terrain:GetCell(x, y, z) end

---@param material Material
---@return Color3
function Terrain:GetMaterialColor(material) end

---@param cframe CFrame
---@param size Vector3
---@return Array
function Terrain:GetTerrainWireframe(cframe, size) end

---@param x int
---@param y int
---@param z int
---@return Tuple
function Terrain:GetWaterCell(x, y, z) end

---@param region TerrainRegion
---@param corner Vector3int16
---@param pasteEmptyCells bool
function Terrain:PasteRegion(region, corner, pasteEmptyCells) end

---@param region Region3
---@param resolution float
---@param channelIds Array
---@return Dictionary
function Terrain:ReadVoxelChannels(region, resolution, channelIds) end

---@param region Region3
---@param resolution float
---@return Tuple
function Terrain:ReadVoxels(region, resolution) end

---@param region Region3
---@param resolution float
---@param sourceMaterial Material
---@param targetMaterial Material
function Terrain:ReplaceMaterial(region, resolution, sourceMaterial, targetMaterial) end

---@param cframe CFrame
---@param size Vector3
---@param sourceMaterial Material
---@param targetMaterial Material
function Terrain:ReplaceMaterialInTransform(cframe, size, sourceMaterial, targetMaterial) end

---@param cframe CFrame
---@param size Vector3
---@param sourceMaterial Material
---@param targetMaterial Material
---@param targetRegion Region3int16
function Terrain:ReplaceMaterialInTransformSubregion(cframe, size, sourceMaterial, targetMaterial, targetRegion) end

---@param x int
---@param y int
---@param z int
---@param material CellMaterial
---@param block CellBlock
---@param orientation CellOrientation
function Terrain:SetCell(x, y, z, material, block, orientation) end

---@param region Region3int16
---@param material CellMaterial
---@param block CellBlock
---@param orientation CellOrientation
function Terrain:SetCells(region, material, block, orientation) end

---@param material Material
---@param value Color3
function Terrain:SetMaterialColor(material, value) end

---@param cframe CFrame
---@param size Vector3
---@param targetMaterial Material
function Terrain:SetMaterialInTransform(cframe, size, targetMaterial) end

---@param cframe CFrame
---@param size Vector3
---@param targetMaterial Material
---@param targetRegion Region3int16
function Terrain:SetMaterialInTransformSubregion(cframe, size, targetMaterial, targetRegion) end

---@param x int
---@param y int
---@param z int
---@param force WaterForce
---@param direction WaterDirection
function Terrain:SetWaterCell(x, y, z, force, direction) end

---@param region Region3
---@param resolution float
---@param strength float
---@return Tuple
function Terrain:SmoothRegion(region, resolution, strength) end

---@param position Vector3
---@return Vector3
function Terrain:WorldToCell(position) end

---@param position Vector3
---@return Vector3
function Terrain:WorldToCellPreferEmpty(position) end

---@param position Vector3
---@return Vector3
function Terrain:WorldToCellPreferSolid(position) end

---@param region Region3
---@param resolution float
---@param channels Dictionary
function Terrain:WriteVoxelChannels(region, resolution, channels) end

---@param region Region3
---@param resolution float
---@param materials Array
---@param occupancy Array
function Terrain:WriteVoxels(region, resolution, materials, occupancy) end
---@field AcquisitionMethod TerrainAcquisitionMethod
---@field ClusterGrid string
---@field ClusterGridV2 string
---@field ClusterGridV3 BinaryString
---@field Decoration bool
---@field GrassLength float
---@field IsSmooth bool
---@field LastUsedModificationMethod TerrainAcquisitionMethod
---@field MaterialColors BinaryString
---@field MaxExtents Region3int16
---@field PhysicsGrid BinaryString
---@field ShorelinesUpgraded bool
---@field SmoothGrid BinaryString
---@field SmoothVoxelsUpgraded bool
---@field WaterColor Color3
---@field WaterReflectance float
---@field WaterTransparency float
---@field WaterWaveSize float
---@field WaterWaveSpeed float

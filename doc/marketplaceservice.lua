---@meta
--- This file is autogenerated by lite-xl-robolox-luacats.

---@class MarketplaceService: Instance  
MarketplaceService = {}
---@param player Instance
---@return bool
function MarketplaceService:PlayerCanMakePurchases(player) end

---@param player Instance
---@param assetId int64
---@param collectibleItemId string
---@param collectibleItemInstanceId string
---@param collectibleProductId string
---@param expectedPrice int
function MarketplaceService:PrepareCollectiblesPurchase(player, assetId, collectibleItemId, collectibleItemInstanceId, collectibleProductId, expectedPrice) end

---@param player Player
---@param lineItems Array
---@param options Dictionary
function MarketplaceService:PromptBulkPurchase(player, lineItems, options) end

---@param player Instance
---@param bundleId int64
function MarketplaceService:PromptBundlePurchase(player, bundleId) end

---@param player Instance
---@param assetId int64
---@param collectibleItemId string
---@param collectibleItemInstanceId string
---@param collectibleProductId string
---@param expectedPrice int
function MarketplaceService:PromptCollectiblesPurchase(player, assetId, collectibleItemId, collectibleItemInstanceId, collectibleProductId, expectedPrice) end

---@param player Instance
---@param gamePassId int64
function MarketplaceService:PromptGamePassPurchase(player, gamePassId) end

---@param player Instance
---@param productId string
function MarketplaceService:PromptNativePurchase(player, productId) end

---@param productId string
function MarketplaceService:PromptNativePurchaseWithLocalPlayer(productId) end

---@param player Instance
function MarketplaceService:PromptPremiumPurchase(player) end

---@param player Instance
---@param productId int64
---@param equipIfPurchased bool
---@param currencyType CurrencyType
function MarketplaceService:PromptProductPurchase(player, productId, equipIfPurchased, currencyType) end

---@param player Instance
---@param assetId int64
---@param equipIfPurchased bool
---@param currencyType CurrencyType
function MarketplaceService:PromptPurchase(player, assetId, equipIfPurchased, currencyType) end

---@param assetId int64
---@param equipIfPurchased bool
function MarketplaceService:PromptRobloxPurchase(assetId, equipIfPurchased) end

---@param user Player
---@param subscriptionId string
function MarketplaceService:PromptSubscriptionPurchase(user, subscriptionId) end

---@param player Instance
---@param productId string
function MarketplaceService:PromptThirdPartyPurchase(player, productId) end

---@param assetId string
---@param robuxAmount int
function MarketplaceService:ReportAssetSale(assetId, robuxAmount) end


function MarketplaceService:ReportRobuxUpsellStarted() end

---@param player Instance
---@param assetType AssetType
function MarketplaceService:SignalAssetTypePurchased(player, assetType) end

---@param ticket string
---@param playerId int64
---@param productId int64
function MarketplaceService:SignalClientPurchaseSuccess(ticket, playerId, productId) end


function MarketplaceService:SignalMockPurchasePremium() end

---@param status MarketplaceBulkPurchasePromptStatus
---@param results Dictionary
function MarketplaceService:SignalPromptBulkPurchaseFinished(status, results) end

---@param player Instance
---@param bundleId int64
---@param success bool
function MarketplaceService:SignalPromptBundlePurchaseFinished(player, bundleId, success) end

---@param player Instance
---@param gamePassId int64
---@param success bool
function MarketplaceService:SignalPromptGamePassPurchaseFinished(player, gamePassId, success) end

---@param didTryPurchasing bool
function MarketplaceService:SignalPromptPremiumPurchaseFinished(didTryPurchasing) end

---@param userId int64
---@param productId int64
---@param success bool
function MarketplaceService:SignalPromptProductPurchaseFinished(userId, productId, success) end

---@param player Instance
---@param assetId int64
---@param success bool
function MarketplaceService:SignalPromptPurchaseFinished(player, assetId, success) end

---@param subscriptionId string
---@param didTryPurchasing bool
function MarketplaceService:SignalPromptSubscriptionPurchaseFinished(subscriptionId, didTryPurchasing) end

---@param value bool
function MarketplaceService:SignalServerLuaDialogClosed(value) end


---@return Instance
function MarketplaceService:GetDeveloperProductsAsync() end

---@param assetId int64
---@param infoType InfoType
---@return Dictionary
function MarketplaceService:GetProductInfo(assetId, infoType) end


---@return int
function MarketplaceService:GetRobuxBalance() end

---@param subscriptionId string
---@return Dictionary
function MarketplaceService:GetSubscriptionProductInfoAsync(subscriptionId) end

---@param subscriptionId string
---@return Dictionary
function MarketplaceService:GetSubscriptionPurchaseInfoAsync(subscriptionId) end

---@param user Player
---@param subscriptionId string
---@return Dictionary
function MarketplaceService:GetUserSubscriptionDetailsAsync(user, subscriptionId) end

---@param user Player
---@param subscriptionId string
---@return Array
function MarketplaceService:GetUserSubscriptionPaymentHistoryAsync(user, subscriptionId) end

---@param user Player
---@param subscriptionId string
---@return Dictionary
function MarketplaceService:GetUserSubscriptionStatusAsync(user, subscriptionId) end

---@param orderRequest Dictionary
---@param options Dictionary
---@return Dictionary
function MarketplaceService:PerformBulkPurchase(orderRequest, options) end

---@param infoType InfoType
---@param productId int64
---@param expectedPrice int
---@param requestId string
---@param isRobloxPurchase bool
---@param collectibleItemId string
---@param collectibleProductId string
---@param idempotencyKey string
---@param purchaseAuthToken string
---@return Dictionary
function MarketplaceService:PerformPurchase(infoType, productId, expectedPrice, requestId, isRobloxPurchase, collectibleItemId, collectibleProductId, idempotencyKey, purchaseAuthToken) end

---@param infoType InfoType
---@param productId int64
---@param expectedPrice int
---@param requestId string
---@param isRobloxPurchase bool
---@param collectiblesProductDetails Dictionary
---@return Dictionary
function MarketplaceService:PerformPurchaseV2(infoType, productId, expectedPrice, requestId, isRobloxPurchase, collectiblesProductDetails) end

---@param subscriptionId string
---@return string
function MarketplaceService:PerformSubscriptionPurchase(subscriptionId) end

---@param subscriptionId string
---@param paymentProvider string
function MarketplaceService:PerformSubscriptionPurchaseV2(subscriptionId, paymentProvider) end

---@param player Instance
---@param assetId int64
---@return bool
function MarketplaceService:PlayerOwnsAsset(player, assetId) end

---@param player Player
---@param bundleId int64
---@return bool
function MarketplaceService:PlayerOwnsBundle(player, bundleId) end

---@param userId int64
---@param gamePassId int64
---@return bool
function MarketplaceService:UserOwnsGamePassAsync(userId, gamePassId) end

